# Django ORM

1. to start up a local first thing we need to do `pipenv install` to create virtual environment and install all the app
2. active virtual env , `pipenv shell`
3. check sql connection config, create database in mysql
4. run migration

### Query_set

1. Query_set encalsulate the query, it will only execute when
   - we iterate it
   - when we convert it into list(query_set)
   - when we slice it, or access specific element
2. The reason for doing this, is because we can use queryset to build complex queries, to save the memories
   ```
   query_set = Product.objects.all()
   query_set.filter().filter().order_by()
   ```
3. There are some method we will directly get the query. For example `count = Product.objects.count()` return number

## Retrieve Objects

1. `product = Product.objects.get(pk=1)`

## Filter

1. `keyword=value`
2. `product = Product.objecs.filter(pk=1)`, we filter product based on id
3. We can use lookup type also, `product = Product.objects.filter(unit_price__gt=5)`, we also have `gte, lte, lt`
4. There are some lookups type that require more than 2 valus, `product= Product.objects.range(20, 30)`
5. for more lookup type can refer to Django ORM website

## Q Objects

1. Some we want to execute some complex query like AND, OR, therefore we can use Q object and use the bitwise operator
2. Q objects will encapsulate the keyword argument
3. Example `query_set = Product.objects.filter(Q(title__icontains='coffee') & ~Q(title__icontains='oz'))`
4. `~` represents NOT operator

## F Objects

1. Sometimes, we want to refer to the field, for example
   - inventory = price

## Sorting

1. `query_set = Product.objects.order_by('unit_price','-title')`, `-` sign indicates in descending order, we can sort by 2 keywords
2. add `reverse()`, will reverse the order
3. we can get the first object by using `earliest()`, whereas we can get the latest object by using `latest`

## Limiting Results

1. `queryset = Product.objects.all()[:5]`, will return the first 5 objects, `[5:10]`, skipping the first 5 objects, and return subsequent object before 10

## Selecting Field for Query

1. Sometimes, we need to only query specific fields, `queryset = Product.objects.values('id', 'title','collection__title')`, by using values(), instead of getting a bunch of instances, we will get a bunch of dictionary, whereas, `values_list()` will return a bunch of tuples

## Defering Field

1. `queryset = Product.objects.only('id', 'title')`, we will get the product instance which only have id and title field
2. difference between `only` and `values`, which former get the product instances, and the later get dictionary of product list
3. `defer`, we want to query all the field, except some selected filed

## select_related

1. When we want to access the related table data, we need to use `select_related(collection__someOtherField)`
2. we use `select_related` when the other end of relationship has only one object, whereas we use `prefetch_related` when the other end of relationship has many objects8

## Aggregate

1. `result = product.objects.aggregate(count=Count('id'), min_price=Min('unit_price'))`

## Anotate

1. Need to understand the query expression object

## Database Functions

1. `queryset = Customer.objects.annotate(full_name=Concat('first_name',' ', 'last_name'))`
2. `queryset = Customer.objects.annnotate(full_name=Func(F('first_name'), Value(' '), F('last_name'), funtion='CONCAT'))`

## Generic Relationships Query

1. First, we need to query the content type id based on the model, in this case we need to find the contenttype id of Product Model in database table (django_content_type)
2. After that, we can query the generic item based on the content type, in this case we want to find product type taggedItem which product id is 1.

## Create Objects

1. ```
   collection = Collection()
      collection.name = 'Video Games'
      collection.featured_product = Product(pk=1)
      collection.save()
   ```
   ```
   collection = Collection.objects.create(name='a', featured_product_id=1)
   collection.id
   // you can retrieve the collection id after creation
   ```
2. Code above demonstrated how to create a new object

## Update Objects

1. ```
   Collection.objects.filter(pk=11).update(featured_product=None)
   ```

```

```
