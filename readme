# Django ORM

1. to start up a local first thing we need to do `pipenv install` to create virtual environment and install all the app
2. active virtual env , `pipenv shell`
3. check sql connection config, create database in mysql
4. run migration

### Query_set

1. Query_set encalsulate the query, it will only execute when
   - we iterate it
   - when we convert it into list(query_set)
   - when we slice it, or access specific element
2. The reason for doing this, is because we can use queryset to build complex queries, to save the memories
   ```
   query_set = Product.objects.all()
   query_set.filter().filter().order_by()
   ```
3. There are some method we will directly get the query. For example `count = Product.objects.count()` return number

## Retrieve Objects

1. `product = Product.objects.get(pk=1)`

## Filter

1. `keyword=value`
2. `product = Product.objecs.filter(pk=1)`, we filter product based on id
3. We can use lookup type also, `product = Product.objects.filter(unit_price__gt=5)`, we also have `gte, lte, lt`
4. There are some lookups type that require more than 2 valus, `product= Product.objects.range(20, 30)`
5. for more lookup type can refer to Django ORM website

## Q Objects

1. Some we want to execute some complex query like AND, OR, therefore we can use Q object and use the bitwise operator
2. Q objects will encapsulate the keyword argument
3. Example `query_set = Product.objects.filter(Q(title__icontains='coffee') & ~Q(title__icontains='oz'))`
4. `~` represents NOT operator

## F Objects

1. Sometimes, we want to refer to the field, for example
   - inventory = price
